#!/bin/bash
set -e

docker_wait_until_healthy_or_none(){
  local wait=${1}
  local total_wait=${2}

  if [[ "$wait" -ge "$total_wait" ]]; then
      echo "docker_wait ran out of time, exit 1"
      docker ps -a
      exit 1
  fi
  for starting in $(docker ps --filter health=starting -q); do
    sleep 10
    docker_wait_until_healthy_or_none $((wait+10)) $total_wait
  done

  for unhealthy in $(docker ps --filter health=unhealthy -q); do
    sleep 10
    docker_wait_until_healthy_or_none $((wait+10)) $total_wait
  done
  echo "docker_wait success"
  exit 0
}

docker_validate(){
  #containers exited
  exitedContainers=$(docker ps --filter status=exited -q)
  #containers exited with 0 exitcode (valid exit)
  validExitedContainers=$(docker ps --all --filter exited=0 -q)
  #if there is a diff between above it means one or more containers exited unhealthy
  if [[ "$exitedContainers" != "$validExitedContainers" ]]; then
      echo "docker_validate fail"
      docker ps -a
      exit 1
  fi
  echo "docker_validate success"
  exit 0
}

wait_and_validate(){
  docker_wait_until_healthy_or_none 0 15
  docker_validate
}

generate_app_log() {
    for i in $(docker ps -a --format "{{.ID}}:{{.Label \"com.docker.compose.service\"}}"); do
        CONTAINER_ID=$(echo $i | cut -d':' -f1)
        SERVICE_NAME=$(echo $i | cut -d':' -f2)
        docker logs $CONTAINER_ID >> $SERVICE_NAME.log
    done;
}

stop_and_clean_docker_world() {
    clear
    docker-compose -f docker-compose.yml --project-name ${DOCKER_PROJECT_NAME} down -v || true
    docker-compose -f docker-compose.yml --project-name ${DOCKER_PROJECT_NAME} rm --force || true
    docker stop "$(docker ps -a -q)" -f || true
    docker rm "$(docker ps -a -q)" -f || true
    remove_image
}

COMMAND=$1
shift
${COMMAND} "$@"